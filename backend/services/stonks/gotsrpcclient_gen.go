// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package stonks

import (
	go_context "context"
	go_net_http "net/http"

	gotsrpc "github.com/foomo/gotsrpc/v2"
	pkg_errors "github.com/pkg/errors"
)

type StonksGoTSRPCClient interface {
	Hello(ctx go_context.Context, name string) (retHello_0 string, retHello_1 *Err, clientErr error)
	HelloInterface(ctx go_context.Context, anything interface{}, anythingMap map[string]interface{}, anythingSlice []interface{}) (clientErr error)
	HelloNumberMaps(ctx go_context.Context, intMap map[int]string) (floatMap map[float64]string, clientErr error)
	HelloScalarError(ctx go_context.Context) (err *ScalarError, clientErr error)
}

type HTTPStonksGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultStonksGoTSRPCClient(url string) *HTTPStonksGoTSRPCClient {
	return NewStonksGoTSRPCClient(url, "/service/stonks")
}

func NewStonksGoTSRPCClient(url string, endpoint string) *HTTPStonksGoTSRPCClient {
	return NewStonksGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewStonksGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPStonksGoTSRPCClient {
	return &HTTPStonksGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPStonksGoTSRPCClient) Hello(ctx go_context.Context, name string) (retHello_0 string, retHello_1 *Err, clientErr error) {
	args := []interface{}{name}
	reply := []interface{}{&retHello_0, &retHello_1}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "Hello", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call stonks.StonksGoTSRPCProxy Hello")
	}
	return
}

func (tsc *HTTPStonksGoTSRPCClient) HelloInterface(ctx go_context.Context, anything interface{}, anythingMap map[string]interface{}, anythingSlice []interface{}) (clientErr error) {
	args := []interface{}{anything, anythingMap, anythingSlice}
	reply := []interface{}{}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "HelloInterface", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call stonks.StonksGoTSRPCProxy HelloInterface")
	}
	return
}

func (tsc *HTTPStonksGoTSRPCClient) HelloNumberMaps(ctx go_context.Context, intMap map[int]string) (floatMap map[float64]string, clientErr error) {
	args := []interface{}{intMap}
	reply := []interface{}{&floatMap}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "HelloNumberMaps", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call stonks.StonksGoTSRPCProxy HelloNumberMaps")
	}
	return
}

func (tsc *HTTPStonksGoTSRPCClient) HelloScalarError(ctx go_context.Context) (err *ScalarError, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "HelloScalarError", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call stonks.StonksGoTSRPCProxy HelloScalarError")
	}
	return
}
