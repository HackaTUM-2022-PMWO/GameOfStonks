// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package stonks

import (
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	time "time"

	gotsrpc "github.com/foomo/gotsrpc/v2"
)

const (
	StonksGoTSRPCProxyHello            = "Hello"
	StonksGoTSRPCProxyHelloInterface   = "HelloInterface"
	StonksGoTSRPCProxyHelloNumberMaps  = "HelloNumberMaps"
	StonksGoTSRPCProxyHelloScalarError = "HelloScalarError"
)

type StonksGoTSRPCProxy struct {
	EndPoint string
	service  *Stonks
}

func NewDefaultStonksGoTSRPCProxy(service *Stonks) *StonksGoTSRPCProxy {
	return NewStonksGoTSRPCProxy(service, "/service/stonks")
}

func NewStonksGoTSRPCProxy(service *Stonks, endpoint string) *StonksGoTSRPCProxy {
	return &StonksGoTSRPCProxy{
		EndPoint: endpoint,
		service:  service,
	}
}

// ServeHTTP exposes your service
func (p *StonksGoTSRPCProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodOptions {
		return
	} else if r.Method != http.MethodPost {
		gotsrpc.ErrorMethodNotAllowed(w)
		return
	}
	defer io.Copy(ioutil.Discard, r.Body) // Drain Request Body

	funcName := gotsrpc.GetCalledFunc(r, p.EndPoint)
	callStats, _ := gotsrpc.GetStatsForRequest(r)
	callStats.Func = funcName
	callStats.Package = "github.com/hackaTUM/GameOfStonks/services/stonks"
	callStats.Service = "Stonks"
	switch funcName {
	case StonksGoTSRPCProxyHello:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_name string
		)
		args = []interface{}{&arg_name}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		helloRet, helloRet_1 := p.service.Hello(arg_name)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{helloRet, helloRet_1}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case StonksGoTSRPCProxyHelloInterface:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_anything      interface{}
			arg_anythingMap   map[string]interface{}
			arg_anythingSlice []interface{}
		)
		args = []interface{}{&arg_anything, &arg_anythingMap, &arg_anythingSlice}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		p.service.HelloInterface(arg_anything, arg_anythingMap, arg_anythingSlice)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case StonksGoTSRPCProxyHelloNumberMaps:
		var (
			args []interface{}
			rets []interface{}
		)
		var (
			arg_intMap map[int]string
		)
		args = []interface{}{&arg_intMap}
		if err := gotsrpc.LoadArgs(&args, callStats, r); err != nil {
			gotsrpc.ErrorCouldNotLoadArgs(w)
			return
		}
		executionStart := time.Now()
		helloNumberMapsFloatMap := p.service.HelloNumberMaps(arg_intMap)
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{helloNumberMapsFloatMap}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	case StonksGoTSRPCProxyHelloScalarError:
		var (
			args []interface{}
			rets []interface{}
		)
		executionStart := time.Now()
		helloScalarErrorErr := p.service.HelloScalarError()
		callStats.Execution = time.Since(executionStart)
		rets = []interface{}{helloScalarErrorErr}
		if err := gotsrpc.Reply(rets, callStats, r, w); err != nil {
			gotsrpc.ErrorCouldNotReply(w)
			return
		}
		gotsrpc.Monitor(w, r, args, rets, callStats)
		return
	default:
		gotsrpc.ClearStats(r)
		gotsrpc.ErrorFuncNotFound(w)
	}
}
